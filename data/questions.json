[
  {
    "id": 1,
    "question": "Programming Question: Hash Tag Generator",
    "answer": "You are required to implement a function generateHash that generates a hash tag from a given input string. The hash tag should be constructed as follows:\n\nThe input string should be converted to a hash tag format, where each word is capitalized and concatenated together without spaces.\nIf the length of the input string is greater than 280 characters or if the input string is empty or contains only whitespace, the function should return false.\nOtherwise, the function should return the generated hash tag prefixed with #.\n\nconst generateHash = (str) => {\n  if (str.length > 280 || str.trim().length === 0) {\n    return false;\n  }\n\n  str = str.split(\" \");\n  str = str.map((currElement) => currElement.replace(currElement[0], currElement[0].toUpperCase()));\n  str = `#${str.join(\"\")}`;\n  return str;\n};\n\nconsole.log(generateHash(\"my name is Satyam Singh\"));"
  },
  {
    "id": 2,
    "question": "Explain closures in JavaScript.",
    "answer": "A closure is the combination of a function and the lexical environment within which that function was declared."
  },
  {
    "id": 3,
    "question": "Write a function called countChar that takes two parameters, a string and a character to count",
    "answer": " // Constraints: // - The function should be case-sensitive. \n - The function should handle both lowercase and uppercase characters.//\n - The character parameter can be any printable ASCII character. \nfunction countChar(str, char) {\n  // Convert the input string and specified character to lowercase\n  str = str.toLowerCase();\n  char = char.toLowerCase();\n  let count = 0;\n\n  // Iterate through each character in the string\n  for (let i = 0; i < str.length; i++) {\n    // Check if the current character matches the specified character\n    if (str.charAt(i) === char) {\n      // Increment count if the characters match\n      count++;\n    }\n  }\n\n  // Return the total count of occurrences\n  return count;\n}\n\n// Test the function with an example\nconsole.log(countChar(\"MissIssippi\", \"I\"));\n// Output: 4"
  },
  {
    "id": 4,
    "question": "Determine the type of triangle based on the lengths of its sides",
    "answer": "Function: checkTriangleType\nDescription: Determines the type of triangle based on the lengths of its sides.\nParameters:\n  - side1: Length of the first side of the triangle.\n  - side2: Length of the second side of the triangle.\n  - side3: Length of the third side of the triangle.\nReturns: A string indicating the type of triangle: \"equilateral\", \"isosceles\", or \"scalene\"\n\nconst checkTriangleType = (a, b, c) => {\n  if (a === b && b === c && a === c) {\n    return \"equilateral\";\n  }\n  if (a === b || b === c || a === c) {\n    return \"isosceles\";\n  }\n  return \"scalene\";\n}; \nconsole.log(checkTriangleType(3, 3, 3)); // Output: equilateral \nconsole.log(checkTriangleType(3, 4, 3)); // Output: isosceles"
  },
  {
    "id": 5,
    "question": "Write a function to sort an array of numbers in ascending order",
    "answer": "Requirements: \\n- The function should take an array of numbers as input. \\n- It should return a new array with the numbers sorted in ascending order.\\n- The original array should remain unchanged.\\n-  const sortAscending =(arr) => \\n{return arr.sort((a, b) => a-b) \\n console.log(sortAscending([5, 3, 10, 8])); \\n// Output: [3, 5, 8, 10]"
  },
  {
    "id": 6,
    "question": "Write a function to determine whether a given string is a palindrome or not.",
    "answer": "Function: isPalindrome\nDescription: Determines whether a given string is a palindrome.\nParameters: \n- str: The input string to be checked.\nReturns: Boolean true if the input string is a palindrome, otherwise false.\n\nconst isPalindrome = (str) => {\n  str = str.toLowerCase().replace(/\\W/g, '');\n  let reversedStr = str.split('').reverse().join('');\n  return reversedStr === str;\n};\n\n// Test cases:\nconsole.log(isPalindrome('A man, a plan, a canal, Panama')); // Output: true\nconsole.log(isPalindrome('racecar')); // Output: true\nconsole.log(isPalindrome('hello')); // Output: false\n\n// Constraints:\n// - The input string may contain letters, digits, spaces, punctuation, and special characters.\n// - The function should be case-insensitive, treating 'Racecar' and 'racecar' as the same.\n// - Ignore spaces, punctuation, and special characters when determining if a string is a palindrome.\n// - The function should return true if the input string is a palindrome and false otherwise."
  },
  {
    "id": 7,
    "question": "Write a function findMax that takes an array of numbers as input and returns the maximum number in the array.",
    "answer": "Function: findMax\nDescription: Finds the maximum number in an array of numbers.\nParameters: \n- numbers: An array of numbers.\nReturns: The maximum number found in the array, or undefined if the input is not an array or empty.\n\nfunction findMax(numbers) {\n    if (!Array.isArray(numbers) || numbers.length === 0) {\n        return undefined; // Handle edge cases where input is not an array or empty\n    }\n\n    let max = numbers[0]; // Initialize max with the first element of the array\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i]; // Update max if current element is greater\n        }\n    }\n    return max;\n}\n\n// Example usage:\nconsole.log(findMax([1, 5, 3, 9, 21])); // Output: 21\nconsole.log(findMax([-10, -5, -3, -9, -2])); // Output: -2\nconsole.log(findMax([])); // Output: undefined"
  },
  {
    "id": 8,
    "question": "Write a function factorial that takes a non-negative integer num as input and returns its factorial.",
    "answer": "Function: factorial\nDescription: Calculates the factorial of a non-negative integer.\nParameters: \n- num: A non-negative integer for which factorial is to be calculated.\nReturns: The factorial of num, which is the product of all positive integers less than or equal to num.\n\nconst factorial = (num) => {\n  let fact = 1;\n  for (let i = 1; i <= num; i++) {\n    fact = fact * i;\n  }\n  return fact;\n};\n\nconsole.log(factorial(5)); // Output: 120\n\n\nFunction: factorial2\nDescription: Calculates the factorial of a non-negative integer using recursion.\nParameters: \n- num: A non-negative integer for which factorial is to be calculated.\nReturns: The factorial of num, which is the product of all positive integers less than or equal to num.\n\nfunction factorial2(num) {\n  // Base case: if num is 0, return 1\n  if (num === 0) {\n    return 1;\n  }\n  // Recursive case: multiply num by the factorial of num - 1\n  else {\n    return num * factorial2(num - 1);\n  }\n}\n\nconsole.log(factorial2(5)); // Output: 120"
  },
  {
    "id": 9,
    "question": "Write a function called calculateAverage that takes an array of numbers as input and returns the average of those numbers.",
    "answer": "Function: calculateAverage\nDescription: Calculates the average of an array of numbers.\nParameters: \n- numbers: An array of numbers for which the average is to be calculated.\nReturns: The average of the numbers in the input array.\n\nconst calculateAverage = (numbers) => {\n    // Check if the input array is empty\n    if (numbers.length === 0) {\n        return 0; // If empty, return 0 to avoid division by zero\n    }\n    \n    let sum = 0;\n    // Loop through the array to calculate the sum of all numbers\n    for (let i = 0; i < numbers.length; i++) {\n        sum = sum +  numbers[i];\n    }\n    \n    // Calculate the average by dividing the sum by the number of elements\n    return sum / numbers.length;\n};\n\n// Example usage:\nconsole.log(calculateAverage([1, 2, 3, 4, 5])); // Output: 3\nconsole.log(calculateAverage([10, 20, 30])); // Output: 20"
  },
  {
    "id": 10,
    "question": "Write a function arraysAreEqual that takes two arrays arr1 and arr2 as input and returns true if the arrays are equal (i.e., contain the same elements in the same order), and false otherwise.",
    "answer": "Function: arraysAreEqual\nDescription: Checks if two arrays are equal by comparing their elements in order.\nParameters: \n- arr1: The first array to compare.\n- arr2: The second array to compare.\nReturns: A boolean value indicating whether the arrays are equal.\n\n// Function definition\nfunction arraysAreEqual(arr1, arr2) {\n    // Check if the arrays have the same length\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    // Compare each element of the arrays\n    for (let i = 0; i < arr1.length; i++) {\n        // If any elements are not equal, return false\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n\n    // If all elements are equal, return true\n    return true;\n}\n\n// Example usage:\nconsole.log(arraysAreEqual([1, 2, 31], [1, 2, 31])); // Output: true\nconsole.log(arraysAreEqual([1, 2, 31], [1, 2, 41])); // Output: false\nconsole.log(arraysAreEqual([], [])); // Output: true"
  },
  {
    "id": 11,
    "question": "Write a function that takes a number as input and returns the sum of its digits.",
    "answer": "Function: sumOfDigits\nDescription: Calculates the sum of the digits of a given number.\nParameters: \n- num: The input number whose digits are to be summed.\nReturns: The sum of the digits of the input number.\n\nconst sumOfDigits = (num) => {\n    let sum = 0;\n    while (num != 0) {\n        let digit = num % 10;\n        sum = sum + digit;\n        num = Math.floor(num / 10);\n    }\n    return sum;\n};\n\n// Example usage:\nconsole.log(sumOfDigits(1234)); // Output: 10\nconsole.log(sumOfDigits(4321)); // Output: 10\nconsole.log(sumOfDigits(123456)); // Output: 21\n\n// Constraints:\n// - The input number will always be a positive integer.\n// - The input number can have multiple digits.\n// - The output should be the sum of all the digits in the input number.\n\n// Homework:\n// This function calculates the sum of digits without converting the number to a string."
  },
  {
    "id": 12,
    "question": "Write a function that takes an array of integers as input and removes any duplicate elements, returning a new array with only the unique elements.",
    "answer": "Function: removeDuplicates\nDescription: Removes duplicate elements from an array of integers and returns a new array with only unique elements.\n\n1st Method to Remove Duplicates:\n\nconst removeDuplicates = (arr) => {\n    return [...new Set(arr)];\n};\n\n2nd Method to Remove Duplicates (In-Place):\n\nconst removeDuplicatesInPlace = (arr) => {\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length;) {\n            if (arr[i] === arr[j]) {\n                arr.splice(j, 1); // Remove the duplicate element j = which element and 1 = how many elements to remove\n            } else {\n                j++; // Move to the next element\n            }\n        }\n    }\n    return arr;\n};\n\n// Example usage:\nconsole.log(removeDuplicates([1, 2, 3, 4])); // Output: [1, 2, 3, 4]\nconsole.log(removeDuplicates([])); // Output: []\nconsole.log(removeDuplicates([1, 2, 3, 2, 1, 4])); // Output: [1, 2, 3, 4]\nconsole.log(removeDuplicates([5, 6, 7, 7, 8, 8, 9])); // Output: [5, 6, 7, 8, 9]\n\n// Constraints:\n// - The input array may contain both positive and negative integers.\n// - The input array may be empty.\n// - The output array should retain the original order of elements."
  },
  {
    "id": 13,
    "question": "Write a function that takes a string as input and returns the count of vowels in that string. Consider 'a', 'e', 'i', 'o', and 'u' as vowels (both lowercase and uppercase).",
    "answer": "Function: countVowels\nDescription: Counts the number of vowels in a given string, considering both lowercase and uppercase vowels ('a', 'e', 'i', 'o', 'u').\n\nconst countVowels = (str) => {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let arr = str.split(\"\");\n    let count = 0;\n    for (let char of arr) {\n        if (vowels.includes(char.toLowerCase())) {\n            count++;\n        }\n    }\n    return count;\n};\n\n// Example usage:\nconsole.log(countVowels(\"Helloo world\")); // Output: 4\nconsole.log(countVowels(\"ThE quIck brOwn fOx\")); // Output: 5\nconsole.log(countVowels(\"Brrrp\")); // Output: 0\n\n// Constraints:\n// - The input string may contain letters in both uppercase and lowercase.\n// - The output should be a non-negative integer representing the count of vowels in the input string."
  },
  {
    "id": 14,
    "question": "Write a function called isPowerOfTwo that takes an integer num as input and returns true if num is a power of two, and false otherwise.",
    "answer": "Function: isPowerOfTwo\nDescription: Determines whether a given integer is a power of two.\n\nconst isPowerOfTwo = (num) => {\n    for (let i = 1; i <= num; i++) {\n        if (2 ** i === num) {\n            return true;\n        }\n    }\n    return false;\n};\n\n// Example usage:\nconsole.log(isPowerOfTwo(8)); // Output: true\nconsole.log(isPowerOfTwo(7)); // Output: false\n\n// Using bitwise operators:\n// const isPowerOfTwo = (num) => {\n//     return num > 0 && (num & (num - 1)) === 0;\n// };\n// console.log(isPowerOfTwo(8)); // Output: true\n// console.log(isPowerOfTwo(7)); // Output: false\n\n// Notes:\n// - The input num will be a positive integer.\n// - Zero (0) and negative integers are not considered powers of two.\n// - The function should return true if the given number is a power of 2, and false otherwise.\n\n// We can solve it using bitwise operators too, but it's your chance to do it and let me know in the comment section."
  },
  {
    "id": 15,
    "question": "Write a function to calculate the sum of squares of all elements in an array. For example, given the array [1, 2, 3], the function should return 14 because 1*1 + 2*2 + 3*3 = 1 + 4 + 9 = 14.",
    "answer": "Function: sumOfSquares\nDescription: Calculates the sum of squares of all elements in an array.\n\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n\n// Example usage:\nconsole.log(sumOfSquares([1, 2, 3])); // Output: 14\n\n// Constraints:\n// - The input array may contain both positive and negative integers.\n// - The input array may be empty, in which case the function should return 0.\n// - The function should handle large arrays efficiently."
  },
  {
    "id": 16,
    "question": "Write a function findMin that takes an array of numbers as input and returns the minimum value found in the array.",
    "answer": "Function: findMin\nDescription: Finds the minimum value in an array of numbers.\n\nfunction findMin(numbers) {\n    // Check if the array is empty\n    if (numbers.length === 0) {\n        return undefined; // Return undefined for an empty array\n    }\n\n    let min = numbers[0]; // Initialize min with the first element of the array\n\n    // Iterate through the array to find the minimum value\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min = numbers[i]; // Update min if the current element is smaller\n        }\n    }\n\n    return min; // Return the minimum value found\n}\n\n// Example usage:\nconsole.log(findMin([5, 10, 2, 8])); // Output: 2\nconsole.log(findMin([5, -3, 0, 12, -71])); // Output: -71\nconsole.log(findMin([])); // Output: undefined (or any suitable message for empty array)\n\n// Constraints:\n// - The input array may contain both positive and negative integers.\n// - The input array may be empty.\n// - The input array may contain duplicate values.\n\n// Note:\n// Ensure the function handles edge cases gracefully, such as an empty input array."
  },
  {
    "id": 17,
    "question": "Write functions to convert a string to camelCase and snake_case.",
    "answer": "Coding Challenge: Convert a string to camelCase & snake_case.\n\n// Function to convert a string to camelCase\nconst toCamelCase = (str) => {\n  str = str.trim().split(\" \");\n\n  str = str.map((curElement, index) => {\n    if (index === 0) {\n      return curElement.toLowerCase();\n    } else {\n      return (\n        curElement.charAt(0).toUpperCase() + curElement.slice(1).toLowerCase()\n      );\n    }\n  });\n  return str.join(\"\");\n};\n\n// Example usage:\nconsole.log(toCamelCase(\"hello world thApa\")); // Output: helloWorldThapa\n\n// Function to convert a string to snake_case\nconst toSnakeCase = (str) => {\n  return str.trim().toLowerCase().replace(/\\s+/g, \"_\");\n};\n\n// Example usage:\nconsole.log(toSnakeCase(\"hello world thApa\")); // Output: hello_world_thapa\n\n// Constraints:\n// - The input string may contain letters in both uppercase and lowercase.\n// - The input string may contain spaces.\n// - The functions should handle leading and trailing spaces in the input string.\n// - The output should be a string in camelCase or snake_case format."
  },
  {
    "id": 18,
    "question": "Write a function to check if a character is uppercase or lowercase.",
    "answer": "// Coding Challenge\n// : Write a function to check if a character is uppercase or lowercase.\n// Constraints:\n// The input char will be a single character.\n// The character can be any printable ASCII character.\n// You can assume that the input will always be a string of length 1.\n\n\n// Notes:\n// Ensure that the function correctly identifies uppercase characters based on their ASCII values.\n// Optimize the function to handle edge cases efficiently.\n\n// 1st method\n\nconst isUpperCase = (char) =>{\n    if(char.charCodeAt(0) >=65 && char.charCodeAt(0) <=90){\n        return true;\n    }\n    return false;\n}\n\n// 2nd method\n\nconst isLowerCase = (char) => {\n    return char === char.toLowerCase();\n}\n\n\n\n// The ASCII values for uppercase letters range from 65 to 90,\n//  while the ASCII values for lowercase letters range from 97 to 122.\n\n// Example usage:\nconsole.log(isUpperCase(\"s\")); // Output: false\nconsole.log(isLowerCase(\"s\")); // Output: true\n"
  },
  {
    "id": 19,
    "question": "Write a function to check if a given string starts with a specific substring.",
    "answer": "//   Coding Challenge\n// 19: Write a function to check if a given string starts with a specific substring.\n \n//  @param {string} str - A string (e.g., \"Hello world\").\n//  @param {string} substr - A substring to check if it starts the given string (e.g., \"Hello\").\n//  @returns {boolean} - true if the given string starts with the specified substring, otherwise false.\n \n\nfunction startsWith(str, substr) {\n    // Loop through the length of the substring\n    for (let i = 0; i < substr.length; i++) {\n        // Check if the characters match\n        if (str[i] !== substr[i]) {\n            return false; // If any character doesn't match, return false\n        }\n    }\n    return true; // If all characters match, return true\n}\n\n// 2nd method \n\n// // const startsWith = (str,substr) =>{\n// //  return str.startsWith(substr);\n// }\n\n// 3rd method \n// const startsWith = (str,substr) =>{\n//     return str.slice(0, substr.length) === substr;\n//    }\n   \n\nconsole.log(startsWith(\"Hello world\", \"Hello\")); // Output: true\nconsole.log(startsWith(\"Hello world\", \"hello\")); // Output: false\n"
  },
  {
    "id": 20,
    "question": "Write a function to reverse a string without using any built-in methods or libraries.",
    "answer": "// *\n//* Coding Challenge\n//*-\n//?20. Write a function to reverse a string without using any built-in methods or libraries. The function should take a string as input and return the reversed string.\n// Example usage:\n\n// 1st method\n\n// const reverseString = (str) =>{\n//     let revstr = \"\";\n//     for(let i=str.length; i>=0; i--){\n//      revstr  = revstr + str.charAt(i);\n\n//     }\n//     return revstr;\n   \n// }\n\n// console.log(reverseString(\"hello\")); // Output: olleH\n\n\n//  2nd method\nconst reverseString = (str) => {\n    // Convert the string to an array of characters\n    let charArray = str.split(\"\");\n    // Reverse the array\n    charArray.reverse();\n    // Join the array back into a string\n    return charArray.join(\"\");\n}\n\nconsole.log(reverseString(\"hello\")); // Output: olleh\n"
  },
  {
    "id": 21,
    "question": "Write a function called calculateMean that takes an array of numbers as input and returns the mean (average) of those numbers.",
    "answer": "// Coding Challenge\n// Write a function called calculateMean that takes an array of numbers as input and returns the mean (average) of those numbers.\n// In math, the mean is the average of a set of numbers, or the numeric value that represents the center of a collection of numbers.\n// Constraints:\n// - The input array may contain positive and negative integers.\n// - The input array may be empty. If it is empty, the function should return 0.\n\nconst calculateMean = (arr) => {\n    if (arr.length === 0) {\n        return 0;\n    }\n    \n    // let sum = 0;\n    // for (let num of arr) {\n    //     sum += num;\n    // }\n    let sum = arr.reduce((acum,curElem) => acum + curElem,0);\n    console.log(sum);\n    return sum / arr.length;\n}\n\nconsole.log(calculateMean([1, 2, 3, 4, 5])); // Output: 3\nconsole.log(calculateMean([10, 20, 30])); // Output: 20\nconsole.log(calculateMean([-1, 0, 1])); // Output: 0\nconsole.log(calculateMean([])); // Output: 0\n"
  },
  {
    "id": 22,
    "question": "Write a Javascript function named findMedian(arr) that takes an array of numbers as input and returns the median value. If the array has an even number of elements, return the average of the two middle values.",
    "answer": "// Coding Challenge\n// Write a Javascript function named findMedian(arr) that takes an array of numbers as input and returns the median value. If the array has an even number of elements, return the average of the two middle values.\n\nconst findMedian = (arr) => {\n    // Step 1: Sort the array\n    arr.sort((a, b) => a - b);\n\n    // Step 2: Check if the array length is odd or even\n    const length = arr.length;\n    const middleIndex = Math.floor(length / 2);\n\n    // Step 3: Calculate median based on array length\n    if (length % 2 === 0) {\n        // Step 4: For even length array\n        return (arr[middleIndex - 1] + arr[middleIndex]) / 2;\n    } else {\n        // Step 5: For odd length array\n        return arr[middleIndex];\n    }\n}\n\nconsole.log(findMedian([15, 3, 9, 1, 71])); // Output: 9\nconsole.log(findMedian([2, 4, 6, 81])); // Output: 5\nconsole.log(findMedian([1, 3, 5, 7, 9, 11])); // Output: 6\n"
  },
  {
    "id": 23,
    "question": "Write a function countOccurrences(numbers) that counts the occurrences of each element in an array.",
    "answer": "// Coding Challenge\n// Write a function countOccurrences(numbers) that counts the occurrences of each element in an array.\n\nfunction countOccurrences(numbers) {\n    const counts = {}; // Create an empty object to store the counts of each element\n    \n    // Iterate through each number in the array\n    for (let element of numbers) {\n      counts[element] = (counts[element] || 0) + 1;\n    }\n    \n    // Return the counts object containing the counts of each element\n    return counts;\n}\n\nconst numbers = [1, 2, 2, 3, 1, 4, 2];\nconsole.log(countOccurrences(numbers));"
  },
  {
    "id": 24,
    "question": "Write a function findMode(arr) that finds the mode (most frequently occurring number) in an array of numbers.",
    "answer": "// Coding Challenge: Find the Mode in an Array\n\nfunction findMode(arr) {\n    let counts = {};\n    let maxCount = 0;\n    let mode;\n    \n    // Iterate through the array and count occurrences of each element\n    for (let element of arr) {\n        counts[element] = (counts[element] || 0) + 1;\n        \n        // Update mode and maxCount if current element's count is higher\n        if (counts[element] > maxCount) {\n            maxCount = counts[element];\n            mode = element;\n        }\n    }\n    \n    return mode;\n}\n\n// Example usage:\nconsole.log(findMode([1, 2, 2, 3, 1, 1, 1, 1, 1, 4, 21])); // Output: 1\n\n// Constraints:\n// - The input array will always contain at least one element.\n// - The mode will always be unique (i.e., there won't be multiple numbers with the same highest frequency)."
  },
  {
    "id": 25,
    "question": "Write a function factorial(n) that calculates the factorial of a number using recursion.",
    "answer": "// Recursion:\n// Recursion is a programming technique where a function calls itself in order to solve a problem. In essence, it's a function that calls itself with smaller or simpler input until it reaches a base case.\n\n// Function to calculate the factorial of a number using recursion\nfunction factorial(n) {\n    // Base case: If n is 0 or 1, return 1 (factorial of 0 and 1 is 1)\n    if (n === 0 || n === 1) {\n        return 1;\n    } else {\n        // Recursive case: If n is greater than 1, recursively call factorial function with n - 1 and multiply it with n\n        return n * factorial(n - 1);\n    }\n}\n\n// Example usage:\nconsole.log(factorial(5)); // Output: 120"
  },
  {
    "id": 26,
    "question": "Write a function factorial(n) using recursion to calculate the factorial of a number.",
    "answer": "// Recursion:\n// Recursion is a programming technique where a function calls itself in order to solve a problem. In essence, it's a function that calls itself with smaller or simpler input until it reaches a base case.\n\n// Example usage:\nconsole.log(factorial(5)); // Output: 120\n\n// Function to calculate the factorial of a number using recursion\nfunction factorial(n) {\n    // Base case: If n is 0 or 1, return 1 (factorial of 0 and 1 is 1)\n    if (n === 0 || n === 1) {\n        return 1;\n    } else {\n        // Recursive case: If n is greater than 1, recursively call factorial function with n - 1 and multiply it with n\n        return n * factorial(n - 1);\n    }\n}"
  },
  {
    "id": 27,
    "question": "Write a function repeatString(str, num) that repeats the input string str the specified number of times num and returns the resulting string.",
    "answer": "// Coding Challenge: Repeat a String\n\n// Write a function called repeatString that takes two parameters:\n//  str: A string that needs to be repeated.\n//  num: An integer representing the number of times the string should be repeated.\n//  The function should repeat the input string str the specified number of times num and return the resulting string.\n\n// 1st method\nconst repeatString = function (str, num) {\n    let repeat = \"\";\n    const maxLength = str.length * num;\n    for (let i = 0; i < num; i++) {\n        if (repeat.length < maxLength) {\n            repeat += str;\n        } else {\n            break; // Exit loop if the maximum length is reached\n        }\n    }\n    return repeat;\n}\n\n// Example usage:\nconsole.log(repeatString(\"abc\", 5)); // Output: \"abcabcabcabcabc\"\n"
  },
  {
    "id": 28,
    "question": "Write a function truncateString(str, maxLength) that truncates the input string str if its length exceeds the specified maxLength. If truncation occurs, the function should add '...' to the end of the truncated string.",
    "answer": "// Coding Challenge: Truncate a String\n\n// Write a function called truncateString that takes two parameters:\n//  str: A string that needs to be truncated.\n//  maxLength: An integer representing the maximum length of the string allowed.\n//  The function should truncate the input string str if its length exceeds the specified maxLength. If truncation occurs, the function should add '...' to the end of the truncated string.\n\nconst truncateString = (str, maxLength) => {\n    if (maxLength <= 0) {\n        return str;\n    }\n    if (str.length > maxLength) {\n        return str.slice(0, maxLength).concat(\"...\");\n    }\n    return str;\n}\n\n// Example usage:\nconsole.log(truncateString(\"A-tisket a-tasket A green and yellow basket\", 8));\n// Output: \"A-tisket...\"\n\n// Constraints:\n// - The input string str will contain only alphanumeric characters and punctuation marks.\n// - The maximum length maxLength will be a positive integer.\n// - The output string length should not exceed maxLength + 3 characters due to the addition of '...'.\n"
  },
  {
    "id": 29,
    "question": "Write a function numberRange(a, b, arr) that generates an array containing consecutive numbers from a to b (inclusive).",
    "answer": "// Coding Challenge: Number Range Generator\n\n// Write a function called numberRange that generates an array containing consecutive numbers from a to b (inclusive).\n// Input:\n// a: An integer representing the starting number of the range.\n// b: An integer representing the ending number of the range.\n// arr: An optional parameter representing the array to store the numbers in the range. It defaults to an empty array.\n// Output:\n// An array containing consecutive numbers from a to b (inclusive).\n\nconst numberRange = (a, b, arr = []) => {\n    if (a > b) {\n        return arr;\n    }\n    arr.push(a);\n    return numberRange(a + 1, b, arr);\n};\n\n// Example usage:\nconsole.log(numberRange(0, 5)); // Output: [0, 1, 2, 3, 4, 5]\nconsole.log(numberRange(-2, 2)); // Output: [ -2, -1, 0, 1, 2 ]\n\n// Constraints:\n// - a and b will be integers.\n// - a will be less than or equal to b\n"
  },
  {
    "id": 30,
    "question": "Write a function numberRangeRecursive(a, b, arr) that generates an array containing consecutive numbers from a to b (inclusive).",
    "answer": "// Coding Challenge: Number Range Generator Using Recursive function\n\n// Write a function called numberRangeRecursive  that generates an array containing consecutive numbers from a to b (inclusive).\n// Input:\n// a: An integer representing the starting number of the range.\n// b: An integer representing the ending number of the range.\n// arr: An optional parameter representing the array to store the numbers in the range. It defaults to an empty array.\n// Output :\n// An array containing consecutive numbers from a to b (inclusive).\n\nconst numberRangeRecursive = (a, b, arr = []) => {\n   if (a <= b) {\n      arr.push(a);\n      return numberRangeRecursive(a + 1, b, arr);\n   }\n   return arr;\n};\n\n// Example usage:\nconsole.log(numberRangeRecursive(0, 5)); // Output: [0, 1, 2, 3, 4, 5]\nconsole.log(numberRangeRecursive(-2, 2)); // Output: [-2, -1, 0, 1, 2]\n\n// Constraints:\n// - a and b will be integers.\n// - a will be less than or equal to b\n"
  },
  {
    "id": 31,
    "question": "Write a function simplePasswordValidator(password) that validates a password based on certain criteria.",
    "answer": "// Coding Challenge: Simple Password Validator\n\n// Write a function called simplePasswordValidator that takes a single parameter:\n// password: A string representing the password to be validated.\n// The function should validate the password based on the following criteria:\n// - The password must contain at least one lowercase letter, one uppercase letter, and one digit.\n// - The length of the password must be at least 8 characters.\n// The function should return true if the password meets all the criteria, otherwise, it should return false.\n\nfunction simplePasswordValidator(password) {\n    // Check if password length is at least 8 characters\n    if (password.length < 8) {\n        return false;\n    }\n\n    // Check if password contains at least one lowercase letter, one uppercase letter, and one digit\n    const hasLowercase = /[a-z]/.test(password);\n    const hasUppercase = /[A-Z]/.test(password);\n    const hasDigit = /[0-9]/.test(password);\n\n    return hasLowercase && hasUppercase && hasDigit;\n}\n\n// Example usage:\nconsole.log(simplePasswordValidator(\"Passw0rd\")); // Output: true\nconsole.log(simplePasswordValidator(\"weak\")); // Output: false\n\n// Constraints:\n// - The input string password will contain only alphanumeric characters and punctuation marks.\n}"
  },
  {
    "id": 32,
    "question": "Given an array of integers, write a function findPairs that finds all pairs of integers in the array that sum up to a target sum and returns them as an array of arrays.",
    "answer": "// Given an array of integers, write a function findPairs that takes two arguments: the array of integers and a target sum. The function should find all pairs of integers in the array that sum up to the target sum and return them as an array of arrays.\n\nfunction findPairs(arr, targetSum) {\n    const pairs = [];\n    const seen = new Set();\n  \n    for (let num of arr) {\n      const complement = targetSum - num;\n      if (seen.has(complement)) {\n        pairs.push([num, complement]);\n      }\n      seen.add(num);\n    }\n  \n    return pairs;\n  }\n  \n  // Test the function\n  const arr = [3, 1, 5, 8, 2, 6];\n  const targetSum = 9;\n  console.log(findPairs(arr, targetSum)); // Output: [[3, 6], [1, 8], [5, 4]]\n}",
    "language": "javascript"
  },
  {
    "id": 33,
    "question": "Write a function findMissingNumber(arr) that finds the missing number in an array's range.",
    "answer": "// Given an array containing some numbers write a code to that will find out the missing number in the array’s range ?\n\nfunction findMissingNumber(arr) {\n    // Sort the array\n    arr.sort((a, b) => a - b);\n    \n    // Iterate through the array to find the missing number\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i + 1] - arr[i] !== 1) {\n            return arr[i] + 1;\n        }\n    }\n    \n    // If no missing number found, return undefined\n    return undefined;\n}\n\n// Example usage:\nconst numbers = [1, 2, 3, 5, 6, 7, 8];\nconsole.log(\"The missing number is:\", findMissingNumber(numbers)); // Output: 4\n\n// Constraints:\n// - The input array will contain consecutive numbers with exactly one missing number.\n// - The missing number will always be between the smallest and largest numbers in the array."
  },
  {
    "id": 34,
    "question": "Write a function removeDuplicates that removes duplicate elements from an array.",
    "answer": "// Programming Challenge: Remove Duplicates from an Array\n\n// First Method: RemoveDuplicates\n// const removeDuplicates = (arr) => {\n//  let duplicate = new Set(arr);\n//  return duplicate;\n\n// };\n// Second Method: RemoveDuplicates\n\n// function removeDuplicates(arr) {\n//   let uniqueArray = [];\n//   for(let i = 0; i < arr.length; i++) {\n//     if(uniqueArray.indexOf(arr[i])  === -1){ // -1 not element found\n//         uniqueArray.push(arr[i]);\n//     }\n    \n//   }\n//   return uniqueArray;\n// }\n//Third Method: RemoveDuplicates\n\nconst removeDuplicates = (arr) => {\n    return arr.filter((value,index) => arr.indexOf(value) === index);\n}\n\nconsole.log(removeDuplicates([1, 2, 3, 3, 4, 5, 6]));\nconsole.log(removeDuplicates([\"a\", \"b\", \"c\", \"d\", \"a\"]));\n\n// Constraints:\n// - The input array may contain duplicate elements.\n// - The output array should contain only unique elements, preserving the order of their first occurrence in the input array."
  },
  {
    "id": 35,
    "question": "Write a function isEmptyObject that checks if an object is empty (has no properties).",
    "answer": "const isEmptyObject = (obj) => {\n    if (Object.keys(obj).length === 0) {\n        return \"it's empty\";\n    } else {\n        return \"it's not empty\";\n    }\n};\n\nconsole.log(isEmptyObject({ name: \"vinod\" })); // Output: \"it's not empty\"\nconsole.log(isEmptyObject({})); // Output: \"it's empty\"\n\n// Constraints:\n// - The function should return a string indicating whether the object is empty or not based on the number of its keys.\n// - The input will always be an object."
  },
  {
    "id": 36,
    "question": "Write two functions: objectToArray and arrayToObject to convert between objects and arrays of key-value pairs.",
    "answer": "// Programming Challenge: Convert Object to Array and Vice Versa\n\n// Convert Object to Array: Write a function objectToArray that takes an object as input and returns an array of key-value pairs.\nconst objectToArray = (obj) => {\n    return Object.entries(obj);\n}\n\n// Convert Array to Object: Write a function arrayToObject that takes an array of key-value pairs and returns a new object.\nconst arrayToObject = (arr) => {\n    return Object.fromEntries(arr);\n}\n\n// Example usage:\nconst obj = {\n    name: \"satyam singh\",\n    age: 22,\n    city: \"mumbai\",\n};\n\nconst entries = objectToArray(obj);\nconst newArray = entries.flat();\nconst newObj = arrayToObject(entries);\n\nconsole.log(entries);\nconsole.log(newArray);\nconsole.log(newObj);\n\n// Constraints:\n// - The input object may contain properties of any data type.\n// - The input array must contain arrays with exactly two elements."
  },
  {
    "id": 37,
    "question": "Programming Challenge: Simple Interest Calculator",
    "answer": "// Programming Challenge: Simple Interest Calculator\n\n// Write a function calculateSimpleInterest that calculates the simple interest given the principal amount, rate of interest per annum, and time in years.\n\nconst calculateSimpleInterest = (p,t,r) => {\n    return p * r *  t/100;\n}\n\n\nconsole.log(calculateSimpleInterest (1000, 5, 3)); // Output: 150\n\n// Constraints:\n// - The function should take three parameters: p (principal amount), t (time in years), and r (rate of interest per annum).\n// - The function should return the calculated simple interest based on the formula: p * r * t / 100."
  },
  {
    "id": 38,
    "question": "Programming Challenge: Number of Days Between Two Dates",
    "answer": "// Programming Challenge: Number of Days Between Two Dates\n\n// Write a function calculateDaysBetweenDates that calculates the number of days between two dates. The dates will be provided in the format \"YYYY-MM-DD\".\n\nconst calculateDaysBetweenDates = (d1, d2) => {\n    let date1 = new Date(d1);\n    let date2 = new Date(d2);\n    let diff = Math.abs(date2 - date1);\n    return diff / (24 * 60 * 60 * 1000); // Convert milliseconds to days\n}\n\nconsole.log(calculateDaysBetweenDates(\"2024-01-01\", \"2024-01-31\")); // Output: 30\n\n// Constraints:\n// - The function should take two parameters: d1 (first date) and d2 (second date) in the format \"YYYY-MM-DD\".\n// - The function should return the number of days between the two dates as an integer."
  },
  {
    "id": 39,
    "question": "Programming Challenge: Calculate Age from birthDate",
    "answer": "// Programming Challenge: Calculate Age from birthDate\n\n// Create a function calculateAge that takes a birthDate as input and returns the current age of the person. The birthDate will be provided in the format \"YYYY-MM-DD\".\n\nconst calculateAge = (birthDate) => {\n    let todayDate = new Date();\n    birthDate = new Date(birthDate);\n\n    // Calculate age\n    let age = todayDate.getFullYear() - birthDate.getFullYear();\n    \n    // Adjust age based on months and days\n    const monthDiff = todayDate.getMonth() - birthDate.getMonth();\n\n    if (monthDiff < 0 || (monthDiff === 0 && todayDate.getDate() < birthDate.getDate())) {\n        age--;\n    }\n    \n    return age;\n};\n\nconsole.log(calculateAge(\"1990-05-15\")); // Output: 33\n\n// Requirements:\n// - Handle leap years and varying numbers of days in each month accurately.\n// - Calculate the age based on the current date in the local time zone.\n// - Return the age in whole years."
  },
  {
    "id": 40,
    "question": "Programming Challenge: Simple Bar Chart from Array Data",
    "answer": "// Programming Challenge: Simple Bar Chart from Array Data\n\n// Create a function generateBarChart that takes an array of numbers and generates a simple text-based bar chart.\n\nconst generateBarChart = (arr) =>{\n  const newArr = arr.map((curElem, index) => {\n  let star = \"\";\n    let number = 0;\n    while(number<curElem){\n      star = star + \"*\";\n      number++;\n    }\n    return `${index+1}: ${star}`;\n  });\n  console.log(newArr.join(\"\\n\"));\n};\n\nconsole.log(generateBarChart([5,3,9,2]));\n\n// Example output:\n// 1: *****\n// 2: ***\n// 3: *********\n// 4: **\n\n// Constraints:\n// - The function should generate a bar chart where each element in the array represents the number of asterisks ('*') to display."
  },
  {
    "id": 41,
    "question": "Programming Challenge: Simple Currency Converter",
    "answer": "// Programming Challenge: Simple Currency Converter\n\n// Write a function to convert an amount from one currency to another using static exchange rates.\n// Requirements:\n// Write a function named convertCurrency that takes three parameters: amount, fromCurrency, and toCurrency.\n// Use a fixed object to store exchange rates relative to a base currency (e.g., USD).\n// The function should return the converted amount in the target currency.\n// Handle conversion through USD as a base, meaning if converting from GBP to EUR, first convert GBP to USD, then USD to EUR.\n\nconst rates = {\n  USD: 1, // Base currency\n  EUR: 0.9, // 1 USD = 0.9 EUR\n  GBP: 0.8, // 1 USD = 0.8 GBP\n  INR: 82, // 1 USD = 74 INR\n};\n\nconst convertCurrency = (amount, fromCurrency, toCurrency) =>{\n    let amountInUSD = 0;\n    if(fromCurrency !== \"USD\") {\n        amountInUSD = amount / rates[fromCurrency];\n    } else {\n        amountInUSD = amount;\n    }\n\n    let convertAmount = 0;\n    if(toCurrency !== \"USD\") {\n        convertAmount = amountInUSD * rates[toCurrency];\n    } else {\n        convertAmount = amountInUSD;\n    }\n\n    return convertAmount;\n};\n\n// Example usage:\nconsole.log(convertCurrency(100, \"GBP\", \"EUR\")); // Output will depend on the rates provided"
  },
  {
    "id": 42,
    "question": "Programming Challenge: Validate a Credit Card Number (Luhn Algorithm)",
    "answer": "// Programming Challenge: Validate a Credit Card Number (Luhn Algorithm)\n\n// Write a function to validate credit card numbers using the Luhn algorithm.\n// Requirements:\n// Write a function named validateCreditCard that takes a credit card number as a string.\n// The function should return true if the number is valid according to the Luhn algorithm, and false otherwise.\n// Ensure the function can handle numbers as strings, which may include spaces and dashes.\n\nconst validateCreditCard = (str) => {\n  // Remove non-digit characters from the string\n  str = str.replace(/\\D/g, \"\");\n\n  // Reverse the digits of the number\n  let revNum = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    revNum = revNum + str[i];\n  }\n\n  // Double every second digit and adjust if greater than 9\n  let sum = revNum\n    .split(\"\")\n    .map((currDigits, index) => {\n      if (index % 2 !== 0) {\n        currDigits = currDigits * 2;\n        if (currDigits > 9) {\n          currDigits = currDigits - 9;\n        }\n      }\n      return Number(currDigits);\n    })\n    .reduce((accum, currElem) => accum + currElem, 0); // Sum all digits\n\n  // Check if the sum modulo 10 is 0\n  return sum % 10 === 0;\n};\n\n// Example usage:\nconsole.log(validateCreditCard(\"4539 1488 0343 6467\")); // Output: true\nconsole.log(validateCreditCard(\"8273 1232 7352 0569\")); // Output: false"
  },
  {
    "id": 43,
    "question": "Programming Challenge: FizzBuzz Challenge",
    "answer": "// Programming Challenge: FizzBuzz Challenge\n\n// Write a function fizzbuzz that accepts two numbers, startNum and endNum, as input. The function should return an array containing numbers and specific strings based on the following rules:\n// For each number i in the range from startNum to endNum (both inclusive):\n// If i is divisible by both 3 and 5, include \"FizzBuzz\" in the result.\n// If i is divisible by only 3, include \"Fizz\" in the result.\n// If i is divisible by only 5, include \"Buzz\" in the result.\n// Otherwise, include the number i itself.\n\nconst fizzbuzz = (startNum, endNum) => {\n  const result = [];\n  for (let i = startNum; i <= endNum; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      result.push(\"FizzBuzz\");\n    } else if (i % 3 === 0) {\n      result.push(\"Fizz\");\n    } else if (i % 5 === 0) {\n      result.push(\"Buzz\");\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// Example 1\nconsole.log(fizzbuzz(1, 15));\n// Output: [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n\n// Example 2\nconsole.log(fizzbuzz(12, 20));\n// Output: [\"Fizz\", 13, 14, \"FizzBuzz\", 16, 17, \"Fizz\", 19, \"Buzz\"]"
  },
  {
    "id": 44,
    "question": "Practice - Email Validation",
    "answer": "// Practice - Email Validation\n\n// To validate an email, we want to check three main things:\n// 1. Local part: the part before the '@' symbol.\n// 2. Domain: the part after the '@' but before the top-level domain.\n// 3. Top-level domain (TLD): the last part following the last dot.\n\nconst validateEmail = (email) => {\n    return /[a-zA-Z0-9]+(?:[.%_+-][a-zA-Z0-9]+)*@[A-Za-z]+\\.[A-Za-z]{2,}$/.test(email);\n};\n\nconsole.log(validateEmail(\"john.doe@example.com\")); // true\nconsole.log(validateEmail(\"invalid..dotadomain.com\")); // false\nconsole.log(validateEmail(\"missingadotcom\")); // false\nconsole.log(validateEmail(\"no@domain\")); // false"
  },
  {
    "id": 45,
    "question": "Create a function validatePassword that checks if a given password string meets the following criteria:",
    "answer": "// Create a function validatePassword that checks if a given password string meets the following criteria:\n// Minimum Length: The password must be at least 8 characters long.\n// Case Requirements: The password must include at least one uppercase letter and at least one lowercase letter.\n// Numerical Requirement: The password must contain at least one digit.\n// Special Character Requirement: The password must have at least one special character from the set !a#$%^g*()-_+=.\n\nconst validatePassword = (password) => {\n    const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n    return regex.test(password);\n}\n\nconsole.log(validatePassword(\"Abcd123@\")); // Output: true\nconsole.log(validatePassword(\"weakpassword\")); // Output: false"
  },
  {
    "id": 47,
    "question": "Programming Challenge: Mobile Number Validation",
    "answer": "// Write a function that takes a string as input and returns true if the string represents a valid Indian mobile number, and false otherwise.\n\nfunction validateIndianMobileNumber(number) {\n    // Regular expression to match Indian mobile numbers\n    var regex = /^[6-9]\\d{9}$/;\n    \n    // Test the input number against the regex\n    return regex.test(number);\n}\n\n// Test Cases\nconsole.log(validateIndianMobileNumber(\"9876543210\")); // Expected output: true\nconsole.log(validateIndianMobileNumber(\"0123456789\")); // Expected output: false\nconsole.log(validateIndianMobileNumber(\"897654321\"));  // Expected output: false\nconsole.log(validateIndianMobileNumber(\"78965432107\")); // Expected output: false"
  },
  {
    "id": 48,
    "question": "validateHexColor",
    "answer": "const validateHexColor = (hexColor) => {\n    return /^#([A-Fa-f\\d]{3}|[A-Fa-f\\d]{6})$/.test(hexColor);\n}\n\nconsole.log(validateHexColor(\"#a3c113\")); // Expected output: true\nconsole.log(validateHexColor(\"#fff\")); // Expected output: true\nconsole.log(validateHexColor(\"#1234567\")); // Expected output: false\nconsole.log(validateHexColor(\"a3c113\")); // Expected output: false\nconsole.log(validateHexColor(\"#g3c113\")); // Expected output: false"
  },
  {
    "id": "49",
    "question": "isValidDate",
    "answer": "const isValidDate = (date) => {\n    return /^(0[1-9]|1[0-2])\\/(0[1-9]|1\\d|2[0-8])\\/(19|20)\\d{2}$/.test(date);\n}\n\nconsole.log(isValidDate(\"12/15/2021\")); // Expected output: true\nconsole.log(isValidDate(\"02/29/2021\")); // Expected output: false\nconsole.log(isValidDate(\"04/31/2020\")); // Expected output: false\nconsole.log(isValidDate(\"01/01/1800\")); // Expected output: false\nconsole.log(isValidDate(\"13/01/2000\")); // Expected output: false\nconsole.log(isValidDate(\"12/31/2099\")); // Expected output: true"
  },
  {
    "id": "50",
    "question": "This line declares a variable number and initializes it with the value 0.\n\nconsole.log(number++); //- This line prints the current value of number and then increments it by 1. The number++ operation is a post-increment operation, which means it returns the value before it was incremented. So, 0 is printed to the console, and number is incremented to 1.\n\nconsole.log(++number); // This line increments the value of number by 1 and then prints it. The ++number operation is a pre-increment operation, which means it increments the value before returning it. So, number is incremented to 2, and 2 is printed to the console.\n\nconsole.log(number); //- This line simply prints the current value of number, which is 2.",
    "answer": "let number = 0;\n\nconsole.log(number++); // Output: 0\nconsole.log(++number); // Output: 2\nconsole.log(number); // Output: 2"
  },
  {
    "id": "51",
    "question": "Write a Code for Promise",
    "answer": "const firstPromise = new Promise((res, rej) => {\n    setTimeout(res, 500, \"one\");\n  });\n  \n  const secondPromise = new Promise((res, rej) => {\n    setTimeout(res, 100, \"two\");\n  });\n  \n  Promise.race([firstPromise, secondPromise]).then(res => console.log(res));"
  },
  {
    "id": "52",
    "question": "Write a function named `findLongestWord` that accepts a sentence as input and returns the longest word in the sentence.",
    "answer": "function findLongestWord(sentence) {\n    const words = sentence.split(' ');\n    let longestWord = '';\n  \n    for (let i = 0; i < words.length; i++) {\n      if (words[i].length > longestWord.length) {\n        longestWord = words[i];\n      }\n    }\n  \n    return longestWord;\n  }\n  \n  console.log(findLongestWord('The quick brown fox jumps over the lazy dog'));\n  // Output: 'quick'"
  },
  {
    "id": "53",
    "question": "What are the values of num1 and num2 after executing the code?",
    "answer": "num1 will be 10 because increaseNumber() returns the current value of num (10) before incrementing it. num2 will be 10 because increasePassedNumber(num1) increments the value of number (which is 10) locally within the function but does not affect num1."
  },
  {
    "id": "54",
    "question": "What will be the output of the code snippet?",
    "answer": "The code snippet will throw an error because colorChange is a static method defined on the Chameleon class, and it cannot be called on an instance of the class (like freddie). Static methods are called on the class itself (Chameleon.colorChange(\"orange\")), not on instances."
  },
{
  "id": "55",
  "question": "How can you access the value of a property in an object?",
  "answer": "You can access the value of a property in an object by using dot notation or bracket notation. With dot notation, you use the object name followed by a dot and the property name (e.g., `objectName.propertyName`). With bracket notation, you use the object name followed by square brackets and the property name as a string (e.g., `objectName['propertyName']`). Both methods will return the value of the specified property."
},
{
  "id": 56,
  "question": "Write a function to findMissingNumber",
  "answer": "function findMissingNumber(arr) {\n    const n = arr.length + 1;\n    const sum = (n * (n + 1)) / 2;\n    const arrSum = arr.reduce((acc, curr) => acc + curr, 0);\n  \n    return sum - arrSum;\n}\n\nconsole.log(findMissingNumber([1, 2, 3, 5])); // Output: 4"
},
{
  "id": 57,
  "question": "Given two strings, return true if they are anagrams of one another",
  "answer": "var firstWord = \"Mary\";\nvar secondWord = \"Army\";\nisAnagram(firstWord, secondWord); // true\nfunction isAnagram(first, second) {\n    // For case insensitivity, change both words to lowercase.\n    var a = first.toLowerCase();\n    var b = second.toLowerCase();\n    // Sort the strings, and join the resulting array to a string. Compare the results\n    a = a.split(\"\").sort().join(\"\");\n    b = b.split(\"\").sort().join(\"\");\n    return a == b;\n}\nconsole.log(isAnagram(\"Mary\", \"Army\"));"
},
{
  "id": 58,
  "question": "Explanation of closure",
  "answer": "function foo() { \n    let b = 1; \n    function inner() { \n        return b; \n    } \n    return inner; \n} \nlet get_func_inner = foo(); \n\nconsole.log(get_func_inner()); \nconsole.log(get_func_inner()); \nconsole.log(get_func_inner());"
},
{
  "id": 59,
  "question": "Write a function threeSum(nums) that takes an array of integers nums and returns all unique triplets [a, b, c] in the array which give the sum of zero.",
  "answer": "function threeSum(nums) {\n    nums.sort((a, b) => a - b); // Sort the array\n    const result = [];\n\n    for (let i = 0; i < nums.length - 2; i++) {\n        if (i > 0 && nums[i] === nums[i - 1]) continue; // Skip duplicates\n\n        let left = i + 1;\n        let right = nums.length - 1;\n\n        while (left < right) {\n            const sum = nums[i] + nums[left] + nums[right];\n\n            if (sum === 0) {\n                result.push([nums[i], nums[left], nums[right]]);\n                while (left < right && nums[left] === nums[left + 1]) left++; // Skip duplicates\n                while (left < right && nums[right] === nums[right - 1]) right--; // Skip duplicates\n                left++;\n                right--;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n\n    return result;\n}\n\n// Test cases\nconsole.log(threeSum([-1, 0, 1, 2, -1, -4])); // Output: [[-1, -1, 2], [-1, 0, 1]]\nconsole.log(threeSum([0, 0, 0]));             // Output: [[0, 0, 0]]\nconsole.log(threeSum([1, 2, -2, -1]));        // Output: []"
},
{
  "id": 60,
  "question": "Write a function isPalindrome(str) that checks if a string is a palindrome.",
  "answer": "function isPalindrome(str) {\n    // Remove non-alphanumeric characters and convert to lowercase\n    const cleanedStr = str.replace(/[^A-Za-z0-9]/g, '').toLowerCase();\n    \n    // Compare the cleaned string with its reversed version\n    const reversedStr = cleanedStr.split('').reverse().join('');\n    \n    return cleanedStr === reversedStr;\n}\n\n// Example usage:\nconsole.log(isPalindrome(\"A man, a plan, a canal, Panama\")); // Output: true\nconsole.log(isPalindrome(\"racecar\")); // Output: true\nconsole.log(isPalindrome(\"hello\")); // Output: false"
},
{
  "id": 61,
  "question": "Write a function isAnagram that takes in two strings and returns true if they are anagrams of each other, and false otherwise.",
  "answer": "function isAnagram(s1, s2) {\n    // Helper function to sort the letters of a string\n    function sortString(str) {\n        return str.split('').sort().join('');\n    }\n\n    // Compare the sorted versions of the strings\n    return sortString(s1) === sortString(s2);\n}\n\n// Test cases\nconsole.log(isAnagram(\"listen\", \"silent\")); // true\nconsole.log(isAnagram(\"hello\", \"world\"));   // false\nconsole.log(isAnagram(\"evil\", \"vile\"));     // true\nconsole.log(isAnagram(\"fluster\", \"restful\")); // true\nconsole.log(isAnagram(\"dormitory\", \"dirtyroom\")); // true\nconsole.log(isAnagram(\"conversation\", \"voicesranton\")); // true\nconsole.log(isAnagram(\"conversation\", \"voicesrando\")); // false"
},
{
  "id": 62,
  "question": "Write a function called delay that returns a Promise which resolves after a specified number of milliseconds.",
  "answer": "function delay(milliseconds) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, milliseconds);\n    });\n}\n\n// Test the function\n// This will print 'Executed after 2 seconds' after 2 seconds\n// Adjust the delay time as needed to test\n\n// Example usage:\ndelay(2000).then(() => {\n    console.log('Executed after 2 seconds');\n});"
},
{
  "id": 63,
  "question": "Implement merge sort for an array of integers.",
  "answer": "function mergeSort(arr) {\n    // Base case: arrays with fewer than 2 elements are already sorted\n    if (arr.length <= 1) {\n      return arr;\n    }\n\n    // Split the array into two halves\n    const mid = Math.floor(arr.length / 2);\n    const left = arr.slice(0, mid);\n    const right = arr.slice(mid);\n\n    // Recursively sort each half\n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right) {\n    const result = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n\n    // Compare the elements of both halves and merge them in sorted order\n    while (leftIndex < left.length && rightIndex < right.length) {\n      if (left[leftIndex] < right[rightIndex]) {\n        result.push(left[leftIndex]);\n        leftIndex++;\n      } else {\n        result.push(right[rightIndex]);\n        rightIndex++;\n      }\n    }\n\n    // Concatenate any remaining elements (one of the halves may have elements left)\n    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n}\n\n// Test the function\nconst array = [38, 27, 43, 3, 9, 82, 10];\nconst sortedArray = mergeSort(array);\nconsole.log(sortedArray); // Output: [3, 9, 10, 27, 38, 43, 82]"
},
{
  "id": 64,
  "question": "Write a function to find the longest word in a sentence.",
  "answer": "function findLongestWord(sentence) {\n  const words = sentence.split(' ');\n  let longestWord = '';\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > longestWord.length) {\n      longestWord = words[i];\n    }\n  }\n  return longestWord;\n}\n\nconsole.log(findLongestWord('The quick brown fox jumps over the lazy dog'));\n// Output: 'quick'"
},
{
  "id": 65,
  "question": "Make alternate characters uppercase in a string.",
  "answer": "function alternateText(str){\n  var char = str.toLowerCase().split('')\n      for(var i=0; i <char.length; i=i+2){\n         char[i]=char[i].toUpperCase()\n      }\n  return char.join('')\n}\nconsole.log(alternateText(\"Priya Bagde\")) //\"PrIyA BaGdE\"\n// OR\nlet alt = \"Priya Bagde\"\nalt = alt.split(\"\")\n  .map((letter,index)=>(index%2)==0 ? letter.toUpperCase(): letter.toLowerCase())\n  .join(\"\")\nconsole.log(alt) //\"PrIyA BaGdE\""
},
{
  "id": 66,
  "question": "Implement enqueue and dequeue using only two stacks.",
  "answer": "// Enqueue operation: push item into the input stack\nvar inputStack = []; // First stack\nfunction enqueue(stackInput, item) {\n    return stackInput.push(item);\n}\n\n// Dequeue operation: pop from the output stack\nvar outputStack = []; // Second stack\nfunction dequeue(stackInput, stackOutput) {\n    // Reverse the stack to prepare for dequeue\n    if (stackOutput.length <= 0) {\n        while (stackInput.length > 0) {\n            var elementToOutput = stackInput.pop();\n            stackOutput.push(elementToOutput);\n        }\n    }\n    // Pop from the output stack\n    return stackOutput.pop();\n}"
},
{
  "id": "67",
  "question": "Find the missing number from unsorted array with O(n) complexity.",
  "answer": "let ar = [2, 7, 8, 5, 1, 4, 3, 6];\n\nfunction missing(a) {\n    let n = a.length;\n    let sum = 1;\n    for (let i = 2; i <= (n + 1); i++) {\n        sum += i;\n        sum -= a[i - 2];\n    }\n    return sum;\n}\n\nconsole.log(missing(ar)); // Output: 9"
},
{
  "id": "68",
  "question": "Write a code for Merge Sort function",
  "answer": "function mergeSort(arr) {\n    // If the array has less than two elements, it's already sorted\n    if (arr.length <= 1) {\n        return arr;\n    }\n\n    // Find the middle point of the array to divide it into two halves\n    const mid = Math.floor(arr.length / 2);\n\n    // Recursively divide the array into two halves\n    const left = mergeSort(arr.slice(0, mid));\n    const right = mergeSort(arr.slice(mid));\n\n    // Merge the two sorted halves\n    return merge(left, right);\n}\n\n// Helper function to merge two sorted arrays\nfunction merge(left, right) {\n    const result = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n\n    // Compare the elements of both arrays and push the smaller element to the result array\n    while (leftIndex < left.length && rightIndex < right.length) {\n        if (left[leftIndex] < right[rightIndex]) {\n            result.push(left[leftIndex]);\n            leftIndex++; // Move to the next element in the left array\n        } else {\n            result.push(right[rightIndex]);\n            rightIndex++; // Move to the next element in the right array\n        }\n    }\n\n    // If there are remaining elements in the left array, add them to the result\n    while (leftIndex < left.length) {\n        result.push(left[leftIndex]);\n        leftIndex++;\n    }\n\n    // If there are remaining elements in the right array, add them to the result\n    while (rightIndex < right.length) {\n        result.push(right[rightIndex]);\n        rightIndex++;\n    }\n\n    // Return the merged and sorted array\n    return result;\n}\n\n// Example usage:\nconst array = [38, 27, 43, 3, 9, 82, 10];\nconst sortedArray = mergeSort(array);\nconsole.log(sortedArray); // Output: [3, 9, 10, 27, 38, 43, 82]"
},
{
  "id": "69",
  "question": "Given two arrays of numbers (define arrays), find all the numbers that occur in both the first and the second arrays. Print them in ascending order.",
  "answer": "const array1 = [1, 2, 3, 4, 5];\n const array2 = [4, 5, 6, 7, 8];\n const commonNumbers = array1.filter(num => array2.includes(num)).sort((a, b) => a - b);\n console.log(commonNumbers); // Output: [4, 5]"
},
{
  "id": "70",
  "question": " Write a code to Implement Stack.",
  "answer": "// Implement Stack \nclass Stack {\n    constructor() {\n        this.items = [];\n    }\n\n    push(element) {\n        this.items.push(element);\n    }\n\n    pop() {\n        if (this.isEmpty()) {\n            return 'Underflow';\n        }\n        return this.items.pop();\n    }\n\n    peek() {\n        if (this.isEmpty()) {\n            return 'No elements in the stack';\n        }\n        return this.items[this.items.length - 1];\n    }\n\n    isEmpty() {\n        return this.items.length === 0;\n    }\n\n    size() {\n        return this.items.length;\n    }\n\n    printStack() {\n        let str = '';\n        for (let i = 0; i < this.items.length; i++) {\n            str += this.items[i] + ' ';\n        }\n        return str;\n    }\n}\n\n// Example usage:\nconst stack = new Stack();\nstack.push(10);\nstack.push(20);\nstack.push(30);\nconsole.log(stack.printStack()); // Output: 10 20 30\nconsole.log(stack.peek()); // Output: 30\nconsole.log(stack.pop()); // Output: 30\nconsole.log(stack.printStack()); // Output: 10 20\nconsole.log(stack.size()); // Output: 2\nconsole.log(stack.isEmpty()); // Output: false"
},
{
  "id": "71",
  "question": "Generate Fibonacci series up to a specified number and calculate their sum.",
  "answer": "// generates the Fibonacci series up to a specified number and calculates their sum:\nfunction fibonacciSeries(n) {\n    let fibSeries = [0, 1];\n    let sum = 1; // Sum starts with 1 because the series starts with 0, 1\n\n    for (let i = 2; i <= n; i++) {\n        fibSeries[i] = fibSeries[i - 1] + fibSeries[i - 2];\n        sum += fibSeries[i];\n    }\n\n    return { series: fibSeries, sum: sum };\n}\n\n// Example usage:\nconst n = 10; // Change this number to generate Fibonacci series up to n\nconst result = fibonacciSeries(n);\n\nconsole.log(`Fibonacci Series up to ${n}:`);\nconsole.log(result.series);\nconsole.log(`Sum of Fibonacci Series up to ${n}: ${result.sum}`);"
},
{
  "id": "72",
  "question": "Write a JavaScript function that takes two arrays (arr1 and arr2) and returns a new array containing the elements from both arrays, but without duplicates.",
  "answer": "function combineUnique(arr1, arr2) {\n    const combined = arr1.concat(arr2);\n    const unique = [];\n    for (let i = 0; i < combined.length; i++) {\n        if (!unique.includes(combined[i])) {\n            unique.push(combined[i]);\n        }\n    }\n    return unique;\n}\n\nconst arr1 = [1, 2, 3];\nconst arr2 = [2, 3, 4];\nconsole.log(combineUnique(arr1, arr2)); // Output: [1, 2, 3, 4]"
},
{
  "id": "73",
  "question": "Merge two sorted arrays",
  "answer": "function mergeSortedArrays(arr1, arr2) {\n    let mergedArray = [];\n    let i = 0;\n    let j = 0;\n\n    // Compare elements from both arrays and push the smaller one into the mergedArray\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] < arr2[j]) {\n            mergedArray.push(arr1[i]);\n            i++;\n        } else {\n            mergedArray.push(arr2[j]);\n            j++;\n        }\n    }\n\n    // If there are remaining elements in arr1, add them to mergedArray\n    while (i < arr1.length) {\n        mergedArray.push(arr1[i]);\n        i++;\n    }\n\n    // If there are remaining elements in arr2, add them to mergedArray\n    while (j < arr2.length) {\n        mergedArray.push(arr2[j]);\n        j++;\n    }\n\n    return mergedArray;\n}\n\n// Example usage:\nlet array1 = [1, 3, 5, 7];\nlet array2 = [2, 4, 6, 8];\nlet result = mergeSortedArrays(array1, array2);\nconsole.log(result); // [1, 2, 3, 4, 5, 6, 7, 8]"
},
{
  "id": "74",
  "question": "Write a code to Implement Quick Sort",
  "answer": "function quickSort(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n\n    let pivot = arr[Math.floor(arr.length / 2)];\n    let left = [];\n    let right = [];\n    let equal = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n            left.push(arr[i]);\n        } else if (arr[i] > pivot) {\n            right.push(arr[i]);\n        } else {\n            equal.push(arr[i]);\n        }\n    }\n\n    return quickSort(left).concat(equal).concat(quickSort(right));\n}\n\n// Example usage:\nlet array = [34, 7, 23, 32, 5, 62];\nconsole.log(quickSort(array)); // Output: [5, 7, 23, 32, 34, 62]"
},
{
  "id": "75",
  "question": "Write a code to Balanced Brackets",
  "answer": "function isBalanced(str) {\n    const stack = [];\n    const pairs = {\n        '(': ')',\n        '{': '}',\n    };\n\n    for (let char of str) {\n        if (char === '(' || char === '{') {\n            stack.push(char);\n        } else if (char === ')' || char === '}') {\n            if (stack.length === 0) {\n                return false; // More closing brackets than opening brackets\n            }\n            let last = stack.pop();\n            if (pairs[last] !== char) {\n                return false; // Mismatched brackets\n            }\n        }\n    }\n\n    return stack.length === 0; // Ensure all opened brackets are closed\n}\n\n// Test cases\nconsole.log(isBalanced(\"(){}\"));      // true\nconsole.log(isBalanced(\"({})\"));      // true\nconsole.log(isBalanced(\"({}[])\");    // true\nconsole.log(isBalanced(\"({)}\"));      // false\nconsole.log(isBalanced(\"{[}]\"));      // false\nconsole.log(isBalanced(\"(){}{}()\"));  // true\nconsole.log(isBalanced(\"(){}{}()(\")); // false"
},
{
  "id": "76",
  "question": "Write a code to find the Kth Distinct String in an Array",
  "answer": "function kthDistinct(arr, k) {\n    let count = {};\n    \n    for (let i = 0; i < arr.length; i++) {\n        if (count[arr[i]]) {\n            count[arr[i]]++;\n        } else {\n            count[arr[i]] = 1;\n        }\n    }\n    \n    let distinctStrings = Object.keys(count).filter(key => count[key] === 1);\n    \n    if (k <= distinctStrings.length) {\n        return distinctStrings[k - 1];\n    } else {\n        return \"\";\n    }\n}\n\nconsole.log(kthDistinct([\"d\", \"b\", \"c\", \"b\", \"c\", \"a\"], 2)); // Output: \"a\"\nconsole.log(kthDistinct([\"aaa\", \"aa\", \"a\"], 1)); // Output: \"aaa\"\nconsole.log(kthDistinct([\"a\", \"b\", \"a\"], 3)); // Output: \"\""
},
{
  "id": "77",
  "question": "Wirte a code to find average Salary Excluding Minimum and Maximum",
  "answer": "function averageSalary(salary) {\n    // Sort the salary array in ascending order\n    salary.sort((a, b) => a - b);\n\n    // Remove the minimum and maximum salary from the array\n    salary.splice(0, 1);\n    salary.splice(-1, 1);\n\n    // Calculate the sum of the remaining salaries\n    let sum = salary.reduce((acc, curr) => acc + curr, 0);\n\n    // Calculate the average salary\n    let average = sum / salary.length;\n\n    return average;\n}\n\n// Example usage\nlet salaries = [1000, 2000, 3000, 4000, 5000];\nconsole.log(averageSalary(salaries)); // Output: 3000"
},
{
  "id": "78",
  "question": "Create a lab to implement time-limited asynchronous functions, which allows you to set a time limit in milliseconds for the given asynchronous function to be executed. If the function takes more time than the specified time limit, it should be rejected with the string 'Time Limit Exceeded'.",
  "answer": "function timeLimitedAsyncFunction(asyncFunction, timeLimit) {\n    return new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n            reject('Time Limit Exceeded');\n        }, timeLimit);\n\n        asyncFunction()\n            .then((result) => {\n                clearTimeout(timeout);\n                resolve(result);\n            })\n            .catch((error) => {\n                clearTimeout(timeout);\n                reject(error);\n            });\n    });\n}"
},
{
  "id": "79",
  "question": "Write a function that finds numbers with an even number of digits in an array.",
  "answer": "function findNumbersWithEvenNumberOfDigits(nums) {\n    // Filter the array to only include numbers with an even number of digits\n    return nums.filter(num => num.toString().length % 2 === 0);\n}\n\n// Example usage\nconst nums = [12, 345, 2, 6, 7896];\nconst evenDigitNumbers = findNumbersWithEvenNumberOfDigits(nums);\nconsole.log(evenDigitNumbers); // Output: [12, 7896]"
},
{
  "id": "80",
  "question": "Write a Function to find the closest number to zero in an array.",
  "answer": "function findClosestToZero(arr) {\n    if (arr.length === 0) {\n        return null; // or handle empty array case as per your requirement\n    }\n\n    let closest = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        if (Math.abs(arr[i]) < Math.abs(closest)) {\n            closest = arr[i];\n        } else if (Math.abs(arr[i]) === Math.abs(closest)) {\n            closest = Math.max(closest, arr[i]);\n        }\n    }\n\n    return closest;\n}\n\n// Example usage\nconst numbers = [5, -2, 9, -7, 3];\nconst closestNumber = findClosestToZero(numbers);\nconsole.log(closestNumber); // Output: -2"
},
{
  "id": "81",
  "question": "Write a javaScript function to increment a large integer represented as an array of digits.",
  "answer": "function plusOne(digits) {\n    // Start from the end of the array\n    for (let i = digits.length - 1; i >= 0; i--) {\n        if (digits[i] < 9) {\n            // If the current digit is less than 9, increment it by 1 and return the array\n            digits[i]++;\n            return digits;\n        } else {\n            // If the current digit is 9, set it to 0\n            digits[i] = 0;\n        }\n    }\n    \n    // If we exit the loop, it means all digits were 9, so we need to add a leading 1\n    digits.unshift(1);\n    return digits;\n}\n\n// Example usage:\nlet digits = [1, 2, 3];\nlet result = plusOne(digits);\nconsole.log(result); // Output: [1, 2, 4]\n\ndigits = [9, 9, 9];\nresult = plusOne(digits);\nconsole.log(result); // Output: [1, 0, 0, 0]"
},
{
  "id": "82",
  "question": "Implementing a HashSet in JavaScript with add, contains, and remove methods.",
  "answer": "class MyHashSet {\n    constructor() {\n        this.size = 1000;\n        this.buckets = Array.from({ length: this.size }, () => []);\n    }\n    \n    // Hash function to compute the index for a given key\n    _hash(key) {\n        return key % this.size;\n    }\n\n    // Adds a key to the HashSet\n    add(key) {\n        const index = this._hash(key);\n        if (!this.buckets[index].includes(key)) {\n            this.buckets[index].push(key);\n        }\n    }\n\n    // Checks if the HashSet contains the specified key\n    contains(key) {\n        const index = this._hash(key);\n        return this.buckets[index].includes(key);\n    }\n\n    // Removes the specified key from the HashSet\n    remove(key) {\n        const index = this._hash(key);\n        const bucket = this.buckets[index];\n        const keyIndex = bucket.indexOf(key);\n        if (keyIndex !== -1) {\n            bucket.splice(keyIndex, 1); // Remove the key from the bucket\n        }\n    }\n}\n\n// Example usage\nconst hashSet = new MyHashSet();\nhashSet.add(1);\nhashSet.add(2);\nconsole.log(hashSet.contains(1)); // Output: true\nconsole.log(hashSet.contains(3)); // Output: false\nhashSet.add(2);\nconsole.log(hashSet.contains(2)); // Output: true\nhashSet.remove(2);\nconsole.log(hashSet.contains(2)); // Output: false"
},
{
  "id": "83",
  "question": "Implementing a function to find the number closest to zero in an integer array, with the highest value returned in case of ties.",
  "answer": "function findClosestToZero(numbers) {\n    let closest = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (Math.abs(numbers[i]) < Math.abs(closest) || (Math.abs(numbers[i]) === Math.abs(closest) && numbers[i] > closest)) {\n            closest = numbers[i];\n        }\n    }\n    return closest;\n}\nconsole.log(findClosestToZero([4, -2, 1, 4, 8])); // Output: 1"
},
{
  "id": "84",
  "question": "Write a function to  finding all disappeared numbers in an array where each number is in the range [1, n].",
  "answer": "function findDisappearedNumbers(nums) {\n    const n = nums.length;\n\n    // Mark the presence of each number\n    for (let i = 0; i < n; i++) {\n        const index = Math.abs(nums[i]) - 1;\n        nums[index] = Math.abs(nums[index]) * -1;\n    }\n\n    // Collect the missing numbers\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        if (nums[i] > 0) {\n            result.push(i + 1);\n        }\n    }\n\n    return result;\n}\n\n// Example usage:\nconst nums1 = [4, 3, 2, 7, 8, 2, 3, 1];\nconsole.log(findDisappearedNumbers(nums1)); // Output: [5, 6]\n\nconst nums2 = [1, 1];\nconsole.log(findDisappearedNumbers(nums2)); // Output: [2]\n\nconst nums3 = [2, 2, 3, 4, 5, 6, 7, 8];\nconsole.log(findDisappearedNumbers(nums3)); // Output: [1]"
},
{
  "id": "85",
  "question": "Write a code to find how many numbers are smaller than the current number in an array?",
  "answer": "const smallerNumbersCount = (nums) => {\n    const sortedNums = [...nums].sort((a, b) => a - b);\n    const countMap = new Map();\n    \n    for (let i = 0; i < sortedNums.length; i++) {\n        if (!countMap.has(sortedNums[i])) {\n            countMap.set(sortedNums[i], i);\n        }\n    }\n    \n    return nums.map((num) => countMap.get(num));\n};\n\n// Example usage\nconst nums = [8, 1, 2, 2, 3];\nconsole.log(smallerNumbersCount(nums)); // Output: [4, 0, 1, 1, 3]"
},
{
  "id": "86",
  "question": "Write a function that determines if three points are not collinear (form a boomerang shape).",
  "answer": "function isBoomerang(point1, point2, point3) {\n    // Deconstruct points\n    const [x1, y1] = point1;\n    const [x2, y2] = point2;\n    const [x3, y3] = point3;\n    \n    // Check if points are not collinear\n    return (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) !== 0;\n}\n\n// Example usage:\nconst pointA = [0, 0];\nconst pointB = [1, 1];\nconst pointC = [2, 2];\nconsole.log(isBoomerang(pointA, pointB, pointC)); // Output: false (points are collinear)\n\nconst pointD = [0, 0];\nconst pointE = [1, 2];\nconst pointF = [3, 1];\nconsole.log(isBoomerang(pointD, pointE, pointF)); // Output: true (points are not collinear)"
},
{
  "id": "87",
  "question": "Calculate the mean of an array after removing a specified number of elements from both ends.",
  "answer": "const arr = [1, 2, 3, 4, 5];\nconst removeCount = 2;\n\n// Sort the array in ascending order\narr.sort((a, b) => a - b);\n\n// Remove the specified number of elements from both ends of the array\narr.splice(0, removeCount);\narr.splice(-removeCount);\n\n// Calculate the mean of the remaining elements\nconst sum = arr.reduce((acc, curr) => acc + curr, 0);\nconst mean = sum / arr.length;\n\nconsole.log(mean);"
},
{
  "id": "88",
  "question": "Write a function to Count common words occurring once in two arrays.",
  "answer": "const countCommonWords = (arr1, arr2) => {\n    const wordCount = {};\n    \n    // Count words in arr1\n    for (let word of arr1) {\n        wordCount[word] = (wordCount[word] || 0) + 1;\n    }\n    \n    // Count words in arr2 and filter common words occurring once\n    const commonWords = arr2.filter(word => {\n        if (wordCount[word] === 1) {\n            delete wordCount[word];\n            return true;\n        }\n        return false;\n    });\n    \n    return commonWords.length;\n};\n\n// Example usage\nconst array1 = ['apple', 'banana', 'orange', 'apple'];\nconst array2 = ['apple', 'banana', 'grape', 'orange'];\n\nconst commonWordCount = countCommonWords(array1, array2);\nconsole.log(commonWordCount); // Output: 2"
},
{
  "id": "89",
  "question": "Write a JavaScript function that takes an array of objects as an input and returns a new array with only the objects that have a specific property.",
  "answer": "function filterObjectsByProperty(arr, property) {\n    return arr.filter(obj => obj.hasOwnProperty(property));\n}\n\n// Example usage\nconst inputArray = [\n    { name: 'John', age: 25 },\n    { name: 'Jane', city: 'New York' },\n    { name: 'Bob', age: 30, city: 'London' },\n    { name: 'Alice' }\n];\n\nconst filteredArray = filterObjectsByProperty(inputArray, 'city');\nconsole.log(filteredArray);"
},
{
  "id": "90",
  "question": "Write a JavaScript function that takes a string as an input and returns the string with all vowels replaced with a specific character.",
  "answer": "function replaceVowels(str, char) {\n    let result = \"\";\n    for (let i = 0; i < str.length; i++) {\n      let c = str[i].toLowerCase();\n      if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n        result += char;\n      } else {\n        result += str[i];\n      }\n    }\n    return result;\n  }\n  \n  // Example usage:\n  const input = \"hello world\";\n  const output = replaceVowels(input, \"*\"); \n  // Output: \"h*ll* w*rld\"\n  console.log(output);"
},
{
  "id": "91",
  "question": "Wirte a function to implement a function called sortPeople that sorts an array of names based on their corresponding heights in descending order.  ",
  "answer": "The function accepts two input arrays, one for the names and another for the corresponding heights of the individuals. \nThe arrays are guaranteed to have distinct heights for each person. \n var sortPeople = function(names, heights) {\n    // Create an array of indices [0, 1, 2, ..., n-1]\n    let indices = names.map((_, index) => index);\n\n    // Sort indices based on corresponding heights in descending order\n    indices.sort((a, b) => heights[b] - heights[a]);\n\n    // Return the names sorted by the sorted indices\n    return indices.map(index => names[index]);\n};\n\n// Example 1\nconsole.log(sortPeople([\"Mary\", \"John\", \"Emma\"], [180, 165, 170]));\n// Output: [\"Mary\", \"Emma\", \"John\"]\n\n// Example 2\nconsole.log(sortPeople([\"Alice\", \"Bob\", \"Bob\"], [155, 185, 150]));\n// Output: [\"Bob\", \"Alice\", \"Bob\"]"
},
{
  "id": "92",
  "question": "Write a JavaScript function that performs cyclic sort on an array of integers.",
  "answer": "function cyclicSort(nums) {\n    let i = 0;\n    while (i < nums.length) {\n        // Element should be in the position nums[i] - 1\n        let correctIndex = nums[i] - 1;\n        \n        // If the element is not already at its correct position\n        if (nums[i] !== nums[correctIndex]) {\n            // Swap current element with the element at correctIndex\n            [nums[i], nums[correctIndex]] = [nums[correctIndex], nums[i]];\n        } else {\n            i++;\n        }\n    }\n    return nums;\n}\n\n// Example usage:\nconsole.log(cyclicSort([3, 1, 5, 4, 2])); // Output: [1, 2, 3, 4, 5]\nconsole.log(cyclicSort([2, 6, 4, 3, 1, 5])); // Output: [1, 2, 3, 4, 5, 6]"
},
{
  "id": "93",
  "question": "Write a JavaScript function that returns an array of squares of each number in a given array of integers, sorted in non-decreasing order without using the Array's sort() method directly on the result array.",
  "answer": "function sortedSquares(nums) {\n    let result = new Array(nums.length);\n    let left = 0;\n    let right = nums.length - 1;\n    let position = nums.length - 1;\n\n    while (left <= right) {\n        if (Math.abs(nums[left]) > Math.abs(nums[right])) {\n            result[position] = nums[left] * nums[left];\n            left++;\n        } else {\n            result[position] = nums[right] * nums[right];\n            right--;\n        }\n        position--;\n    }\n\n    return result;\n}\n\n// Example usage\nconsole.log(sortedSquares([-4, -1, 0, 3, 10])); // Output: [0, 1, 9, 16, 100]"
},
{
  "id": "94",
  "question": "Write a function to implement a function that merges two arrays into a single array, alternating elements from each array.",
  "answer": "function mergeArrays(array1, array2) { \n    const mergedArray = []; \n    const maxLength = Math.max(array1.length, array2.length); \n    \n    for (let i = 0; i < maxLength; i++) { \n        if (i < array1.length) mergedArray.push(array1[i]); \n        if (i < array2.length) mergedArray.push(array2[i]); \n    } \n    \n    return mergedArray; \n}\n\n// Example usage\nconst array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconsole.log(mergeArrays(array1, array2)); // Output: [1, 4, 2, 5, 3, 6]"
},
{
  "id": "95",
  "question": "You are given a list of meetings, where each meeting is represented by a start time and an end time. Your task is to write a function mergeMeetings that takes an array of meeting time intervals and merges any overlapping meetings into a single time interval.",
  "answer": "function mergeMeetings(meetings) {\n    if (meetings.length === 0) return [];\n  \n    // Step 1: Sort the meetings by their start times\n    meetings.sort((a, b) => a[0] - b[0]);\n  \n    // Step 2: Initialize the merged meetings array with the first meeting\n    const mergedMeetings = [meetings[0]];\n  \n    // Step 3: Iterate through the sorted meetings\n    for (let i = 1; i < meetings.length; i++) {\n      const lastMergedMeeting = mergedMeetings[mergedMeetings.length - 1];\n      const currentMeeting = meetings[i];\n  \n      // Check if the current meeting overlaps with the last merged meeting\n      if (currentMeeting[0] <= lastMergedMeeting[1]) {\n        // Merge the current meeting with the last merged meeting\n        lastMergedMeeting[1] = Math.max(lastMergedMeeting[1], currentMeeting[1]);\n      } else {\n        // No overlap, add the current meeting to the merged meetings array\n        mergedMeetings.push(currentMeeting);\n      }\n    }\n  \n    // Step 4: Return the merged meetings array\n    return mergedMeetings;\n  }\n  \n  // Example usage:\n  const meetings = [\n    [1, 3],\n    [2, 4],\n    [5, 7],\n    [6, 8]\n  ];\n  \n  const result = mergeMeetings(meetings);\n  console.log(result); // Output: [[1, 4], [5, 8]]"
},
{
  "id": "96",
  "question": "You are given an array of objects representing a list of books in a library. Each book object contains the following properties: title (string), author (string), year (number), checkedOut (boolean). Your task is to write a function getCheckedOutBooksByAuthor(library, author) that takes in the library array and an author's name. The function should return an array of book titles by the given author that are currently checked out.",
  "answer": "function getCheckedOutBooksByAuthor(library, author) {\n    return library\n      .filter(book => book.author === author && book.checkedOut)\n      .map(book => book.title);\n  }\n  \n  // Example usage:\n  const library = [\n    { title: \"The Great Gatsby\", author: \"F. Scott Fitzgerald\", year: 1925, checkedOut: true },\n    { title: \"To Kill a Mockingbird\", author: \"Harper Lee\", year: 1960, checkedOut: false },\n    { title: \"1984\", author: \"George Orwell\", year: 1949, checkedOut: true },\n    { title: \"Animal Farm\", author: \"George Orwell\", year: 1945, checkedOut: true },\n    { title: \"The Catcher in the Rye\", author: \"J.D. Salinger\", year: 1951, checkedOut: false },\n    { title: \"Brave New World\", author: \"Aldous Huxley\", year: 1932, checkedOut: true }\n  ];\n  \n  console.log(getCheckedOutBooksByAuthor(library, \"George Orwell\"));\n  // Output: [\"1984\", \"Animal Farm\"]"
},
{
  "id": "97",
  "question": "Write a code to implement higher-order function. A higher-order function in JavaScript is a function that either takes one or more functions as arguments or returns a function as its result. In other words, it operates on functions, either by taking them as arguments, returning them, or both.",
  "answer": "function operationOnArray(arr, operation) {\n    let result = [];\n    for (let element of arr) {\n      result.push(operation(element));\n    }\n    return result;\n  }\n  \n  function double(x) {\n    return x * 2;\n  }\n  \n  let numbers = [1, 2, 3, 4];\n  let doubledNumbers = operationOnArray(numbers, double);\n  console.log(doubledNumbers); // Output: [2, 4, 6, 8]"
},
{
  "id": "98",
  "question": "Given an array of integers, find the largest product yielded from three of the integers.",
  "answer": "function findLargestProduct(arr) {\n    if (arr.length < 3) {\n        return \"Array should have at least 3 integers\";\n    }\n\n    arr.sort((a, b) => a - b); // Sort the array in ascending order\n\n    const n = arr.length;\n    const product1 = arr[n - 1] * arr[n - 2] * arr[n - 3]; // Product of the three largest integers\n    const product2 = arr[0] * arr[1] * arr[n - 1]; // Product of the two smallest integers and the largest integer\n\n    return Math.max(product1, product2);\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nconst largestProduct = findLargestProduct(numbers);\nconsole.log(largestProduct); // Output: 60"
},
{
  "id": "99",
  "question": "Write a JavaScript code for adding new elements dynamically.",
  "answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>Document</title>\n</head>\n\n<body>\n    <button onclick=\"create()\">\n        Click Here!\n    </button>\n\n    <script>\n        function create() {\n            let geeks = document.createElement('geeks');\n            geeks.textContent = \"Geeksforgeeks\";\n            geeks.setAttribute('class', 'note');\n            document.body.appendChild(geeks);\n        }\n    </script>\n</body>\n</html>"
},
{
  "id": "100",
  "question": "Find the employee who worked on the task with the longest duration.",
  "answer": "function hardestWorker(n, logs) {\n    let maxDuration = 0;\n    let employeeId = Infinity;\n\n    for (let i = 0; i < logs.length; i++) {\n        let duration = (i === 0) ? logs[i][1] : logs[i][1] - logs[i - 1][1];\n        if (duration > maxDuration) {\n            maxDuration = duration;\n            employeeId = logs[i][0];\n        } else if (duration === maxDuration && logs[i][0] < employeeId) {\n            employeeId = logs[i][0];\n        }\n    }\n\n    return employeeId;\n}\n\n// Example usage:\nconst logs = [[0,3],[2,5],[0,9],[1,15]];\nconsole.log(hardestWorker(4, logs)); // Output: 1"
}
















































  
  
  
  

  


  
  

  
  
  
  
  
  
  
  
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
  
    
  
  
  
  
  
  
   
  
]
